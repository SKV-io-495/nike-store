# A descriptive name for your workflow
name: Build, Push to ECR, and Deploy to Render

# This tells GitHub to run the workflow automatically
# whenever you push code to the "main" branch.
on:
  push:
    branches:
      - main

jobs:
  build-push-deploy:
    name: Build, Push, and Deploy
    # Use a clean virtual computer provided by GitHub to run the job
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository's code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Configure the AWS credentials using the secrets you created
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to your Amazon ECR "warehouse"
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build the Docker image and push it to ECR
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 5: Trigger deployment on Render
      - name: Deploy to Render
        run: curl "${{ secrets.RENDER_DEPLOY_HOOK }}"
